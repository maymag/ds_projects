{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "import keras\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import various componenets for model building\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\n",
    "from keras.layers import LSTM, Input, TimeDistributed\n",
    "from keras.models import Model\n",
    "from keras.optimizers import RMSprop\n",
    "\n",
    "# Import the backend\n",
    "from keras import backend as K"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_files = \"/Users/maggie/Downloads/training_set\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_files = \"/Users/maggie/Downloads/test_set\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "batch_size = 32\n",
    "# preprocessing for Keras\n",
    "train_datagen = ImageDataGenerator(#the pixels are rgb so values between 0 and 255 must be normalized\n",
    "        rescale=1./255,\n",
    "        shear_range=0.2,\n",
    "        zoom_range=0.2,\n",
    "        horizontal_flip=True)\n",
    "\n",
    "#only rescaling for testing\n",
    "test_datagen = ImageDataGenerator(rescale=1./255)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 8005 images belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    "#make training set\n",
    "train_generator = train_datagen.flow_from_directory(\n",
    "        train_files,  # this is the target directory\n",
    "        target_size=(300, 300),  # all images will be resized to 300x300\n",
    "        batch_size=batch_size,\n",
    "        class_mode='binary')  # since we use binary_crossentropy loss, we need binary labels\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 2023 images belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    "# make test set\n",
    "validation_generator = test_datagen.flow_from_directory(\n",
    "        test_files,\n",
    "        target_size=(300, 300),\n",
    "        batch_size=batch_size,\n",
    "        class_mode='binary')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#add layers\n",
    "model = Sequential()\n",
    "model.add(Conv2D(32, (3, 3), input_shape=(300, 300, 3),activation = 'relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model.add(Conv2D(64, (3, 3), activation = 'relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model.add(Flatten())  # this converts our 3D feature maps to 1D feature vectors\n",
    "model.add(Dense(64, activation = 'relu'))\n",
    "# Dropout layers remove features and fight overfitting\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(1, activation = 'sigmoid'))\n",
    "\n",
    "# COMPILE MODEL\n",
    "model.compile(loss='binary_crossentropy',\n",
    "              optimizer=keras.optimizers.Adam(),\n",
    "              metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "12/12 [==============================] - 40s 3s/step - loss: 2.4306 - acc: 0.4870 - val_loss: 0.6889 - val_acc: 0.5750\n",
      "Epoch 2/50\n",
      "12/12 [==============================] - 34s 3s/step - loss: 0.7001 - acc: 0.4870 - val_loss: 0.6930 - val_acc: 0.4875\n",
      "Epoch 3/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.6889 - acc: 0.5625 - val_loss: 0.6856 - val_acc: 0.5188\n",
      "Epoch 4/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.6888 - acc: 0.5547 - val_loss: 0.7020 - val_acc: 0.5062\n",
      "Epoch 5/50\n",
      "12/12 [==============================] - 36s 3s/step - loss: 0.6853 - acc: 0.5234 - val_loss: 0.6697 - val_acc: 0.4938\n",
      "Epoch 6/50\n",
      "12/12 [==============================] - 38s 3s/step - loss: 0.6922 - acc: 0.5234 - val_loss: 0.6924 - val_acc: 0.5813\n",
      "Epoch 7/50\n",
      "12/12 [==============================] - 38s 3s/step - loss: 0.6783 - acc: 0.5781 - val_loss: 0.6585 - val_acc: 0.6125\n",
      "Epoch 8/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.6805 - acc: 0.5729 - val_loss: 0.6603 - val_acc: 0.6125\n",
      "Epoch 9/50\n",
      "12/12 [==============================] - 36s 3s/step - loss: 0.6604 - acc: 0.5807 - val_loss: 0.6161 - val_acc: 0.6750\n",
      "Epoch 10/50\n",
      "12/12 [==============================] - 38s 3s/step - loss: 0.6549 - acc: 0.6016 - val_loss: 0.6600 - val_acc: 0.6188\n",
      "Epoch 11/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.6561 - acc: 0.5729 - val_loss: 0.6457 - val_acc: 0.6062\n",
      "Epoch 12/50\n",
      "12/12 [==============================] - 36s 3s/step - loss: 0.7226 - acc: 0.5443 - val_loss: 0.6818 - val_acc: 0.5250\n",
      "Epoch 13/50\n",
      "12/12 [==============================] - 36s 3s/step - loss: 0.6838 - acc: 0.5833 - val_loss: 0.6618 - val_acc: 0.6667\n",
      "Epoch 14/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.6637 - acc: 0.6276 - val_loss: 0.6587 - val_acc: 0.6438\n",
      "Epoch 15/50\n",
      "12/12 [==============================] - 36s 3s/step - loss: 0.6857 - acc: 0.6146 - val_loss: 0.6522 - val_acc: 0.6250\n",
      "Epoch 16/50\n",
      "12/12 [==============================] - 36s 3s/step - loss: 0.6562 - acc: 0.6406 - val_loss: 0.6149 - val_acc: 0.6250\n",
      "Epoch 17/50\n",
      "12/12 [==============================] - 36s 3s/step - loss: 0.6682 - acc: 0.6146 - val_loss: 0.6514 - val_acc: 0.6000\n",
      "Epoch 18/50\n",
      "12/12 [==============================] - 36s 3s/step - loss: 0.6934 - acc: 0.5495 - val_loss: 0.6783 - val_acc: 0.5750\n",
      "Epoch 19/50\n",
      "12/12 [==============================] - 36s 3s/step - loss: 0.7050 - acc: 0.5260 - val_loss: 0.6831 - val_acc: 0.5188\n",
      "Epoch 20/50\n",
      "12/12 [==============================] - 128s 11s/step - loss: 0.6782 - acc: 0.5599 - val_loss: 0.6491 - val_acc: 0.5687\n",
      "Epoch 21/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.6773 - acc: 0.5859 - val_loss: 0.6797 - val_acc: 0.5000\n",
      "Epoch 22/50\n",
      "12/12 [==============================] - 36s 3s/step - loss: 0.6822 - acc: 0.5312 - val_loss: 0.6686 - val_acc: 0.5875\n",
      "Epoch 23/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.6670 - acc: 0.5911 - val_loss: 0.6507 - val_acc: 0.5750\n",
      "Epoch 24/50\n",
      "12/12 [==============================] - 36s 3s/step - loss: 0.6730 - acc: 0.5938 - val_loss: 0.6504 - val_acc: 0.6312\n",
      "Epoch 25/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.6528 - acc: 0.5885 - val_loss: 0.6511 - val_acc: 0.5875\n",
      "Epoch 26/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.6363 - acc: 0.6641 - val_loss: 0.7042 - val_acc: 0.5926\n",
      "Epoch 27/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.6748 - acc: 0.6380 - val_loss: 0.6264 - val_acc: 0.6188\n",
      "Epoch 28/50\n",
      "12/12 [==============================] - 38s 3s/step - loss: 0.6276 - acc: 0.6589 - val_loss: 0.6834 - val_acc: 0.5625\n",
      "Epoch 29/50\n",
      "12/12 [==============================] - 39s 3s/step - loss: 0.6385 - acc: 0.6406 - val_loss: 0.6461 - val_acc: 0.6188\n",
      "Epoch 30/50\n",
      "12/12 [==============================] - 38s 3s/step - loss: 0.6656 - acc: 0.5964 - val_loss: 0.6049 - val_acc: 0.6687\n",
      "Epoch 31/50\n",
      "12/12 [==============================] - 38s 3s/step - loss: 0.6626 - acc: 0.6094 - val_loss: 0.6255 - val_acc: 0.6625\n",
      "Epoch 32/50\n",
      "12/12 [==============================] - 38s 3s/step - loss: 0.6569 - acc: 0.6302 - val_loss: 0.6441 - val_acc: 0.6188\n",
      "Epoch 33/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.6515 - acc: 0.6406 - val_loss: 0.6115 - val_acc: 0.6500\n",
      "Epoch 34/50\n",
      "12/12 [==============================] - 36s 3s/step - loss: 0.6382 - acc: 0.6338 - val_loss: 0.6132 - val_acc: 0.6438\n",
      "Epoch 35/50\n",
      "12/12 [==============================] - 38s 3s/step - loss: 0.6357 - acc: 0.6849 - val_loss: 0.6196 - val_acc: 0.7063\n",
      "Epoch 36/50\n",
      "12/12 [==============================] - 38s 3s/step - loss: 0.6292 - acc: 0.6875 - val_loss: 0.6559 - val_acc: 0.6250\n",
      "Epoch 37/50\n",
      "12/12 [==============================] - 36s 3s/step - loss: 0.6575 - acc: 0.6146 - val_loss: 0.6416 - val_acc: 0.6625\n",
      "Epoch 38/50\n",
      "12/12 [==============================] - 35s 3s/step - loss: 0.6239 - acc: 0.6328 - val_loss: 0.6315 - val_acc: 0.5938\n",
      "Epoch 39/50\n",
      "12/12 [==============================] - 36s 3s/step - loss: 0.6143 - acc: 0.6536 - val_loss: 0.6031 - val_acc: 0.6370\n",
      "Epoch 40/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.6492 - acc: 0.6380 - val_loss: 0.6084 - val_acc: 0.7000\n",
      "Epoch 41/50\n",
      "12/12 [==============================] - 38s 3s/step - loss: 0.6088 - acc: 0.6797 - val_loss: 0.6484 - val_acc: 0.6625\n",
      "Epoch 42/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.6222 - acc: 0.6615 - val_loss: 0.6688 - val_acc: 0.6687\n",
      "Epoch 43/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.6246 - acc: 0.6458 - val_loss: 0.6516 - val_acc: 0.6125\n",
      "Epoch 44/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.6355 - acc: 0.6693 - val_loss: 0.5938 - val_acc: 0.6625\n",
      "Epoch 45/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.6103 - acc: 0.6745 - val_loss: 0.6444 - val_acc: 0.7063\n",
      "Epoch 46/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.6420 - acc: 0.6458 - val_loss: 0.5802 - val_acc: 0.7000\n",
      "Epoch 47/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.6150 - acc: 0.6719 - val_loss: 0.5099 - val_acc: 0.7562\n",
      "Epoch 48/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.5998 - acc: 0.7188 - val_loss: 0.5964 - val_acc: 0.6937\n",
      "Epoch 49/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.6263 - acc: 0.6458 - val_loss: 0.5701 - val_acc: 0.7125\n",
      "Epoch 50/50\n",
      "12/12 [==============================] - 37s 3s/step - loss: 0.6286 - acc: 0.6745 - val_loss: 0.6046 - val_acc: 0.6562\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1827cbfcf8>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fit model to data\n",
    "model.fit_generator(\n",
    "        train_generator,\n",
    "        steps_per_epoch=400 // batch_size,\n",
    "        epochs=50,\n",
    "        validation_data=validation_generator,\n",
    "        validation_steps=160 // batch_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
